
/*
 * Users
 */

path /users/{uid} is User {
  read() { isCurrentUser(uid)}
  write() { isCurrentUser(uid)}
}

type User {
  email: EmailString,
  name : NameString | Null,
  lastVisitedEvent: String | Null
}

/*
 * Events
 */
path /events is Event[] {
	read() {true}
	write() {auth.isAdmin == true}
}

type Event {
	validate() {this.id == key()}
	id: String,
	active: Boolean,
	name: NameString,
	date: Number,
	start: TimeString | Null,
	end: TimeString | Null,
	type: String,
	description: String | Null,
	headerImage: String | Null
}

/*
 * Event Participation
 */

path /eventParticipants/{event} is Object {
	read() {false}
	write() {auth.canProcessTasks == true && isEvent(event)}
}

path /eventParticipants/{event}/{uid} is Boolean {
	validate() {isUser(uid)}
}


path /userEventParticipations/{uid} is Object {
	read() {isCurrentUser(uid)}
	write() {auth.canProcessTasks == true && isUser(uid)}
}

path /userEventParticipations/{uid}/{event} is Boolean {
	validate() {isEvent(event)}
}


/*
 * userEventData
 */
path /userEventData/{uid}/{event} is UserEventData {
	read() {isCurrentUser(uid) && userIsParticipantOf(event)}
	write() {isCurrentUser(uid) && isEvent(event) && userIsParticipantOf(event)}
}

type UserEventData {
	table: String | Null
}


/*
* QUEUES
*/


/*
* SHOP
*/

path /eventStoreItems is Object {
	read() {true}
}

path /eventStoreItems/{event}/{itemId} is StoreItem {
	write() {auth.isAdmin == true && isEvent(event)}
}

type StoreItem {
	validate() {this.id == key()}
	id: String,
	category: Number,
	name: NameString,
	description: String,
	price: Number,
	picture: String | Null
}

type OrderItem  {
	id: String,
	category: Number,
	name: NameString,
	description: String,
	price: Number,
	picture: String | Null
	count: Number
}

type Order {
	validate() {auth.canProcessTasks == true || (valueIsParticipantOf(this.eventId) && 
		isCurrentUser(this.userId))}
	created: Number | Null
	eventId: String | Null,
	userId: String | Null,
	name: NameString | Null,
	table: String | Null
	items: OrderItem[]
}


type StateChange extends Number {
	validate() {this == now || prior(this) == this}
}

type Progress extends Number {
	validate() {this >= 0 && this <= 100}
}

type ErrorDetails extends Object {
	error : String | Null,
	error_stack: String | Null,
	previous_state: String | Null,
	original_task: Any | Null,
	attempts: AttemptCount | Null
}

type AttemptCount extends Number {
	validate() {this > 0}
}

path /orders/tasks is OrderTaskList {
	index() {["_state"]}
}

type OrderTaskList extends OrderTask[] {
	read() {auth.canProcessTasks == true}
	write() {isSignedIn()}
}

type OrderTask {
	validate() {this.order != null ||
		(auth.canProcessTasks == true && 
		this._state != null && 
		this._state_changed != null && 
		this._progress != null)
	}
	_state: String | Null,
	_state_changed: StateChange | Null,
	_owner: String | Null,
	_progress: Progress | Null,
	_error_details: ErrorDetails | Null,
	_id: String | Null,
	order: Order | Null
}


/*
 * Helper functions and types
 */


type EventRef extends String{
  validate() {isEvent(this)}
}

type NameString extends String {
  validate() {this.length > 0 && this.length < 100}
}

type EmailString extends String {
  validate() {this.matches(/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i)}
}

type TimeString extends String {
	validate() {this.matches(/^([01]?[0-9]|2[0-3]):[0-5][0-9]$/i)}
}


userIsParticipantOf(event) {prior(root.eventParticipants[event][auth.uid] != null)}
valueIsParticipantOf(event) {prior(root.eventParticipants).child(event.val()).child(auth.uid).val() != null}
isUser(uid) {prior(root.users[uid] != null)}
isCurrentUser(uid) { isSignedIn() && auth.uid == uid }
isSignedIn() { auth != null }
isEvent(event) {prior(root.events[event]) != null}
isStoreItem(item) {prior(root.storeItems[item]) != null}