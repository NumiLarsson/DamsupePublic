{
  "rules": {
    "users": {
      "$uid": {
        ".validate": "newData.hasChildren(['email'])",
        "email": {
          ".validate": "newData.isString() && newData.val().matches(/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i)"
        },
        "name": {
          ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length < 100"
        },
        "lastVisitedEvent": {
          ".validate": "newData.isString()"
        },
        "$other": {
          ".validate": "false"
        },
        ".read": "auth != null && auth.uid == $uid",
        ".write": "auth != null && auth.uid == $uid"
      }
    },
    "events": {
      "$key1": {
        ".validate": "newData.hasChildren(['id', 'active', 'name']) && newData.child('id').val() == $key1",
        "id": {
          ".validate": "newData.isString() && root.child('events').child(data.val()).val() != null"
        },
        "active": {
          ".validate": "newData.isBoolean()"
        },
        "name": {
          ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length < 100"
        },
        "$other": {
          ".validate": "false"
        }
      },
      ".validate": "newData.hasChildren()",
      ".read": "true"
    },
    "eventParticipants": {
      "$event": {
        ".validate": "newData.hasChildren()",
        ".write": "auth.isAdmin == true && root.child('events').child($event).val() != null",
        "$uid": {
          ".validate": "newData.isBoolean() && root.child('users').child($uid).val() != null"
        }
      }
    },
    "userEventParticipations": {
      "$uid": {
        ".validate": "newData.hasChildren()",
        ".read": "auth != null && auth.uid == $uid",
        ".write": "auth.isAdmin == true && root.child('users').child($uid).val() != null",
        "$event": {
          ".validate": "newData.isBoolean() && root.child('events').child($event).val() != null"
        }
      }
    },
    "userEventData": {
      "$uid": {
        "$event": {
          ".validate": "newData.hasChildren()",
          "table": {
            ".validate": "newData.isString()"
          },
          "$other": {
            ".validate": "false"
          },
          ".read": "auth != null && auth.uid == $uid && root.child('eventParticipants').child($event).child(auth.uid).val() != null",
          ".write": "auth != null && auth.uid == $uid && root.child('events').child($event).val() != null && root.child('eventParticipants').child($event).child(auth.uid).val() != null"
        }
      }
    },
    "eventAccessRequests": {
      "tasks": {
        "$key2": {
          ".validate": "newData.hasChildren() && (newData.child('uid').val() != null && newData.child('eventId').val() != null && newData.child('password').val() != null || auth.canProcessTasks == true && newData.child('_state').val() != null && newData.child('_state_changed').val() != null && newData.child('_progress').val() != null)",
          "_state": {
            ".validate": "newData.isString()"
          },
          "_state_changed": {
            ".validate": "newData.isNumber() && (newData.val() == now || data.val() == newData.val())"
          },
          "_owner": {
            ".validate": "newData.isString()"
          },
          "_progress": {
            ".validate": "newData.isNumber() && newData.val() >= 0 && newData.val() <= 100"
          },
          "_error_details": {
            ".validate": "newData.hasChildren()",
            "error": {
              ".validate": "newData.isString()"
            },
            "error_stack": {
              ".validate": "newData.isString()"
            },
            "previous_state": {
              ".validate": "newData.isString()"
            },
            "original_task": {
              ".validate": "true"
            },
            "attempts": {
              ".validate": "newData.isNumber() && newData.val() > 0"
            },
            "$other": {
              ".validate": "false"
            }
          },
          "_id": {
            ".validate": "newData.isString()"
          },
          "uid": {
            ".validate": "newData.isString()"
          },
          "eventId": {
            ".validate": "newData.isString()"
          },
          "password": {
            ".validate": "newData.isString()"
          },
          "$other": {
            ".validate": "false"
          }
        },
        ".validate": "newData.hasChildren()",
        ".read": "auth.canProcessTasks == true",
        ".write": "auth.canAddTasks == true || auth.canProcessTasks == true",
        ".indexOn": [
          "_state"
        ]
      }
    }
  }
}
